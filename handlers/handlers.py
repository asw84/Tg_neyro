from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.states import Form
from keyboards import get_command_keyboard, get_navigation_keyboard, get_level_keyboard, get_course_action_keyboard
from services.cat_api import get_cat_image

router = Router()

courses = {
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "junior": ["–ö—É—Ä—Å A", "–ö—É—Ä—Å B"],
        "middle": ["–ö—É—Ä—Å C", "–ö—É—Ä—Å D"],
        "senior": ["–ö—É—Ä—Å E"]
    },
    "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞": {
        "junior": ["–ö—É—Ä—Å F", "–ö—É—Ä—Å G"],
        "middle": ["–ö—É—Ä—Å H"],
        "senior": ["–ö—É—Ä—Å I", "–ö—É—Ä—Å J"]
    },
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "junior": ["–ö—É—Ä—Å K"],
        "middle": ["–ö—É—Ä—Å L", "–ö—É—Ä—Å M"],
        "senior": ["–ö—É—Ä—Å N"]
    }
}


@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    user_first_name = message.from_user.first_name
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_first_name}! üåü –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∏–∂–µ.", reply_markup=get_command_keyboard())
    await state.clear()

@router.message(Command(commands=['help']))
async def help_handler(message: types.Message):
    help_text = (
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/–û–±—É—á–µ–Ω–∏–µ - –í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è\n"
        "/–û –Ω–∞—Å - –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ\n"
        "/–ó–¥–µ—Å—å –∫–æ—Ç–∏–∫–∏ - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –º–∏–ª–æ–≥–æ –∫–æ—Ç–∏–∫–∞ üê±\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º!"
    )
    await message.answer(help_text)

@router.message(lambda message: message.text == "–û–±—É—á–µ–Ω–∏–µ")
async def level_handler(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=get_navigation_keyboard())
    await state.set_state(Form.CHOOSE_DIRECTION)

@router.message(lambda message: message.text == "–û –Ω–∞—Å")
async def info_handler(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∫—É—Ä—Å—ã...")

@router.message(lambda message: message.text == "–ó–¥–µ—Å—å –∫–æ—Ç–∏–∫–∏")
async def cat_handler(message: types.Message):
    cat_image_url = await get_cat_image()
    if cat_image_url:
        await message.answer_photo(photo=cat_image_url)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∏–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(Form.CHOOSE_DIRECTION)
async def choose_direction_handler(message: types.Message, state: FSMContext):
    direction = message.text
    if direction not in courses:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.", reply_markup=get_navigation_keyboard())
        return

    await state.update_data(direction=direction)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=get_level_keyboard())
    await state.set_state(Form.CHOOSE_LEVEL)

@router.message(Form.CHOOSE_LEVEL)
async def choose_level_handler(message: types.Message, state: FSMContext):
    level = message.text.lower()

    if level == "–Ω–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=get_navigation_keyboard())
        await state.set_state(Form.CHOOSE_DIRECTION)
        return

    user_data = await state.get_data()
    direction = user_data.get("direction")

    if level not in courses[direction]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —É—Ä–æ–≤–Ω–µ–π.", reply_markup=get_level_keyboard())
        return

    available_courses = courses[direction][level]
    course_list = "\n".join(available_courses)

    await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n{course_list}", reply_markup=get_course_action_keyboard())
    await state.set_state(Form.COURSE_ACTION)

@router.message(Form.COURSE_ACTION)
async def course_action_handler(message: types.Message, state: FSMContext):
    action = message.text
    if action == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å!", reply_markup=get_command_keyboard())
        await state.clear()
    elif action == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=get_navigation_keyboard())
        await state.set_state(Form.CHOOSE_DIRECTION)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.")
